{% extends 'base.html.twig' %}

{% block body %}
	<div class="container">
		{{ form_start(form, {'attr': {'id': 'edit_create_therapy_scheme_form'}}) }}
		<h2 class="mt-3">{{ 'app-new-therapy-scheme-template-title'|trans }}:
			<i>{{ scheme.name }}</i>
		</h2>
		<div class="row mt-3">
			<div class="col-8">
				{{ form_label(form.title) }}
				{{ form_widget(form.title, {'attr': {'class': 'form-control'}}) }}
			</div>
		</div>
		<div class="row mt-3">
			<div class="col-8">
				{{ form_label(form.objective) }}
				{{ form_widget(form.objective, {'attr': {'class': 'form-control'}}) }}
			</div>
		</div>
		<div class="row mt-3">
			<div class="col-8">
				{{ form_label(form.place) }}
				{{ form_widget(form.place, {'attr': {'class': 'form-control'}}) }}
			</div>
		</div>
		<div class="row mt-3">
			<div class="col-8">
				{{ form_label(form.schemeDate) }}
				{{ form_widget(form.schemeDate, {'attr': {'class': 'form-control'}}) }}
			</div>
		</div>
		<div class="row mt-3">
			<div class="col-8">
				{{ form_label(form.salutation) }}
				{{ form_widget(form.salutation, {'attr': {'class': 'form-control'}}) }}
			</div>
		</div>
		<div class="row mt-3">
			<div class="col-8">
				{{ form_label(form.footer) }}
				{{ form_widget(form.footer, {'attr': {'class': 'form-control'}}) }}
			</div>
		</div>
		<div class="row mt-3">
			<div class="col-8">
				{{ form_widget(form.labels, {'attr': {'class': 'form-control'}}) }}
			</div>
		</div>

		<div class="row mt-3">
			<p class="fw-lighter">
				<b>{{ 'app-therapy-report-requested-labels'|trans }}:</b>
				<cite title="" id="selectedLabels">
					{% for label in selectedLabelsEntities %}
						{{ label.shortName }}
						{% if not loop.last %},
						{% endif %}
					{% endfor %}
				</cite>
			</p>
		</div>
       
		<div class="row mb-3">
			<div class="col-sm-8">
				<input type="search" class="form-control" id="searchStubsInput" name="searchName" placeholder="Search Therapy Stubs">
			</div>
			<div class="col-sm-4">
				<button type="button" class="btn btn-primary btn-block" id="searchButton">Search</button>
			</div>
		</div>
		<div class="row mb-3" id="searchResults" ></div>
      
		<div id="contentDisplayedWhenLabelsAreSelected" class="d-none">
			<div class="row mt-3">
				<div class="form-check form-switch col-2 m-3">
					{{ form_widget(form.selectAll) }}
				</div>
				<div class="col-7 m-2 text-center">
					<button class="btn btn-primary" type="button" id="resetStubsOrderButton">
						Reset Stubs Order
					</button>
				</div>
			</div>
			<div class="row mt-3 justify-content-center">
			</div>
			<div class="row mt-3">
            <div class="col-12">
				<table class="table">
					<thead>
						<tr>
							<th>
								{{ 'app-therapy-report-table-title'|trans }}
							</th>
							<th>
								{{ 'app-therapy-report-table-name'|trans }}
							</th>

							{% if reportExcerpt == true %}
								<th class="excerptItem">
									{{ 'app-therapy-report-table-excerpt'|trans }}
								</th>
								<th class="descriptionItem d-none">
									{{ 'app-therapy-report-table-description'|trans }}
								</th>
							{% else %}
								<th class="excerptItem d-none">
									{{ 'app-therapy-report-table-excerpt'|trans }}
								</th>
								<th class="descriptionItem">
									{{ 'app-therapy-report-table-description'|trans }}
								</th>
							{% endif %}


							<th>
								{{ 'app-therapy-report-table-background'|trans }}
							</th>
							<th>
								{{ 'app-therapy-report-table-comment'|trans }}
							</th>
							<th>
								{{ 'app-therapy-report-table-label'|trans }}
							</th>
						</tr>
					</thead>
					<tbody>
						{{ oldTbody|raw }}
					</tbody>
				</table>
			</div>
			</div>

			<div class="container-fluid">
				<div class="row">
					<div class="col text-center">
						<div class="d-grid gap-2">
							<button class="btn btn-primary" type="button" id="generatePatientHTMLButton">
								{{ 'app-therapy-report-generate-patient-report-button'|trans }}
								(HTML)
							</button>
						</div>
					</div>
					<div class="col text-center">
						<div class="d-grid gap-2">
							<button class="btn btn-primary" type="button" id="generatePatientPDFButton">
								{{ 'app-therapy-report-generate-patient-report-button'|trans }}
								(PDF)
							</button>
						</div>
					</div>
					<div class="col text-center">
						<div class="d-grid gap-2">
							<button class="btn btn-primary" type="button" id="generateShortHTMLButton">
								{{ 'app-therapy-report-generate-short-report-button'|trans }}
								(HTML)
							</button>
						</div>
					</div>
					<div class="col text-center">
						<div class="d-grid gap-2">
							<button class="btn btn-primary" type="button" id="generateCombinedHTMLButton">
								{{ 'app-therapy-report-generate-combined-report-button'|trans }}
								(HTML)
							</button>
						</div>
					</div>
				</div>
				<div class="row mt-3">
					<div class="col text-center">
						<div class="d-grid gap-2">
							<button class="btn btn-primary" type="button" id="updateTemplateButton">
								{{ 'app-therapy-report-update-template-button'|trans }}
							</button>
						</div>
					</div>
					<div class="col text-center">
						<div class="d-grid gap-2">
							<button class="btn btn-primary" type="button" id="saveAsTemplateButton">
								{{ 'app-therapy-report-save-as-template-button'|trans }}
							</button>
						</div>
					</div>
				</div>
			</div>

		</div>

		<div id="contentDisplayedWhenNoLabelsAreSelected">
			<div class="list-group mb-3">
					<div class="alert alert-secondary" role="alert">
							<h5 class="mb-1">{{ 'app-no-results-message'|trans }}</h5>
					</div>
			</div>
		</div>

		{{ form_widget(form.targets) }}
		{{ form_widget(form.comments) }}
		{{ form_widget(form.updateCurrent) }}
		{{ form_end(form) }}
	</div>


<div style="display:none">
	<form action="{{ path('app_therapy_scheme_generate_pdf') }}" method="post" id="generatePDFForm">
	</form>
	<a href="{{path('app_therapy_scheme_generate_html')}}" id="generateHTMLLink" target="_blank">
	</a>
</div>
{% endblock %}


{% block javascripts %}
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://unpkg.com/sortablejs@1.14.0/Sortable.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.ckeditor.com/4.16.2/full/ckeditor.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<script>

	document.addEventListener('DOMContentLoaded', function() {
		initializeSortableForTables();
	});

	// Function to initialize Sortable for each tbody
	function initializeSortableForTables() {
		const tbodyElements = document.querySelectorAll('.sortable');

		tbodyElements.forEach(tbody => {
			const sortable = new Sortable(tbody, {
				filter: '.filtered',
				onMove(evt, oe) {
					// Check if the related element has the class 'filtered'
					return evt.related.className.indexOf('filtered') === -1;
				},
				preventOnFilter: true,
			});
		});
	}

	function getStubsOrder() {
		// Get all tbody elements with the class 'sortable'
		const tbodyElements = document.querySelectorAll('tbody.sortable');

		const labelOrderArray = []; // Define an array to store JSON representations

		tbodyElements.forEach(tbody => {
			// Get all rows in the current tbody
			const rows = Array.from(tbody.children);

			const labelOrderMap = new Map(); // Define a map for each tbody
			if(rows.length <= 3) {
				const labelId = tbody.id.match(/oldTbody(\d+)/)[1];
				labelOrderMap.set(labelId, []);
			} else {
			rows
				.filter((_, index) => index > 1) // Skip the first row
				.forEach(function(row) {
					const match = row.id.match(/rowLabel\|(\d+)\|stub\|(\d+)/);
					if(match) {

						const labelId = match[1];
						const stubId = match[2];

						if (!labelOrderMap.has(labelId)) {
							labelOrderMap.set(labelId, []);
						}

						labelOrderMap.get(labelId).push(stubId);

					}
				});
			}

			// Convert labelOrderMap to JSON and push it to labelOrderArray
			labelOrderArray.push([...labelOrderMap]);
		});

		// Return the array if needed
		return labelOrderArray;
	}

	function getStubsWithoutLabels() {
		// Get all tbody elements with the class 'sortable'
		const tbodyElements = document.querySelectorAll('tbody.sortable');

		const labelOrderArray = []; // Define an array to store JSON representations

		tbodyElements.forEach(tbody => {
			// Get all rows in the current tbody
			const rows = Array.from(tbody.children);

			const labelOrderMap = new Map(); // Define a map for each tbody

			rows
				.filter((_, index) => index !== 0) // Skip the first row
				.forEach(function(row) {
					const match = row.id.match(/rowLabel\|(\d+)\|stub\|(\d+)/);
					if(match) {

						const labelId = match[1];
						const stubId = match[2];

						// Check if the stub has a label
						const labelCol = row.childNodes[row.childNodes.length - 2].textContent.trim();
                		const hasLabels = labelCol !== '';

						if(!hasLabels) {

							if (!labelOrderMap.has(labelId)) {
								labelOrderMap.set(labelId, []);
							}

							labelOrderMap.get(labelId).push(stubId);

						}

					}
				});

			// Convert labelOrderMap to JSON and push it to labelOrderArray
			if(labelOrderMap.size){
				labelOrderArray.push([...labelOrderMap]);
			}
		});

		// Return the array if needed
		return labelOrderArray;
	}

	let selectedLabels = [];
	$(document).ready(function () {
		$("#edit_therapy_scheme_labels")
			.select2({
				placeholder: "Select labels",
				allowClear: true,
				tags: true,
				tokenSeparators: [",", " "],
			})
			.on("change", async (e) => {
					const labelsSelect2 = $("#edit_therapy_scheme_labels").select2("data");
					const selectedValuesList = labelsSelect2.map((item) => item.text).join(", ");
					$("#selectedLabels").text(selectedValuesList);
					$("#selectedLabels").attr("title", selectedValuesList);

					const selectedValues = labelsSelect2.map((item) => item.id);
					selectedLabels = selectedValues;
					const currentComments = getCurrentComments();
					const checkedCheckboxes = getCheckedCheckboxes();
					const stubsOrder = getStubsOrder();
					const suppress = false;
					const excerpt = false;
					
					
					const categoryFreeText = JSON.parse($("#edit_therapy_scheme_freeText").val());
					await generateDynamicForm(selectedValues, currentComments, checkedCheckboxes, stubsOrder, suppress, excerpt);

					Object.keys(categoryFreeText).forEach( category => {
						CKEDITOR.instances[`category_free_text_${category}`].setData(categoryFreeText[category]);
					});

					initializeSortableForTables()
					{# * Show/hide content #}
					if (selectedValues.length > 0 || getStubsOrder().length != 0) {
						$("#contentDisplayedWhenLabelsAreSelected").removeClass("d-none");
						$("#contentDisplayedWhenNoLabelsAreSelected").addClass("d-none");
					} else {
						$("#contentDisplayedWhenLabelsAreSelected").addClass("d-none");
						$("#contentDisplayedWhenNoLabelsAreSelected").removeClass("d-none");
					}

			});
	});

	// * A function that returns an array of the comments
	const getCurrentComments = () => {
		const textAreas = document.querySelectorAll("textarea[name^='labelID=']");

		const comments = [];
		textAreas.forEach((textArea) => {
			comments.push({
				key: textArea.name,
				comment: textArea.value,
			});
		});
		return comments;
	};

	// * A function that returns an array of the NOT CHECKED checkboxes
	const getCheckedCheckboxes = () => {
		const checkboxes = document.querySelectorAll("input[name^='targets|labelID=']");

		const checkedCheckboxes = [];
		checkboxes.forEach((checkbox) => {
			if (checkbox.checked) {
				checkedCheckboxes.push(checkbox.name);
			}
		});
		return checkedCheckboxes;
	};

	
	const getCategoryFreeText = () => {
		const categoryFreeText = {};

		Object.keys(CKEDITOR.instances).forEach(key => {
			const categoryId = key.split('_')[3];
			categoryFreeText[categoryId] = CKEDITOR.instances[key].getData();
		});
		
		$("#edit_therapy_scheme_freeText").val(JSON.stringify(categoryFreeText));

		return categoryFreeText;
	};



	{# ! Generate the dynamic form #}
const generateDynamicForm = async (selectedLabels, currentComments, checkedCheckboxes, stubsOrder, suppress, excerpt) => {
    // Get all tbody elements
    const tbodyElements = document.querySelectorAll("table:not(#searchResultsTable) tbody");
    const currentLanguage = "{{ app.request.locale }}";
    const url = "{{ path('app_therapy_scheme_generateForm') }}";
    const requestBody = {
        selectedLabels,
        currentLanguage,
        currentComments,
        checkedCheckboxes,
        stubsOrder,
        suppress,
        excerpt
    };

    try {
        // Send a POST request
        const response = await axios.post(url, requestBody);


		const freeText = getCategoryFreeText();
		
        // Remove all existing tbody elements
        tbodyElements.forEach(tbody => {
            tbody.remove();
        });

        // Append new tbody sections from the response HTML
        document.querySelector("table:not(#searchResultsTable)").insertAdjacentHTML('beforeend', response.data);
        if (!response.data) {
            $("#contentDisplayedWhenNoLabelsAreSelected").removeClass("d-none");
            $("#contentDisplayedWhenLabelsAreSelected").addClass("d-none");
        }
        sortInit();
        deleteInit();

        const tbodyElementsNew = document.querySelectorAll("tbody[id^='oldTbody']");

        tbodyElementsNew.forEach(tbody => {
            const categoryID = tbody.id.replace('oldTbody', '');
            const ckEditorFieldHTML = `
                <tr class="filtered">
                    <td colspan="8">
                        <div class="editor-container">
                            <label for="category_free_text_${categoryID}" class="editor-label">Free Text</label>
                            <textarea id="category_free_text_${categoryID}" name="editor1"></textarea>
                        </div>
                    </td>
                </tr>
            `;
			
            tbody.insertAdjacentHTML('beforeend', ckEditorFieldHTML);

            // Initialize CKEditor for the new field with the required configuration
            CKEDITOR.replace(`category_free_text_${categoryID}`, {
				toolbar: [
					{ name: 'basicstyles', items: [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript'] },
					{ name: 'paragraph', items: [ 'NumberedList', 'BulletedList', 'Indent' ] },
					{ name: 'insert', items: [ 'SpecialChar' ] }
				],
				removeButtons: '',
            });

			CKEDITOR.instances[`category_free_text_${categoryID}`].setData(freeText[categoryID]);

        });

    } catch (error) {
        console.error("Error:", error);
    }
};

	// * Generate the Report
	const generateReport = async (selectedLabels, currentComments, checkedCheckboxes, stubsOrder, suppress, excerpt, combined = false) => {
		if (selectedLabels.length > 0 || stubsOrder.length) {
			const currentLanguage = "{{ app.request.locale }}";
			const url = "{{ path('app_therapy_scheme_generateReport') }}";

			const title = document.getElementById('edit_therapy_scheme_title').value;
			const objective = document.getElementById('edit_therapy_scheme_objective').value;
			const place = document.getElementById('edit_therapy_scheme_place').value;
			const date = document.getElementById('edit_therapy_scheme_schemeDate').value;
			const salutation = document.getElementById('edit_therapy_scheme_salutation').value;
			const footer = document.getElementById('edit_therapy_scheme_footer').value;
			const categoryFreeText = getCategoryFreeText();
			const requestBody = {
				selectedLabels,
				currentLanguage,
				currentComments,
				checkedCheckboxes,
				stubsOrder,
				suppress,
				excerpt,
				combined,
				title,
				objective,
				place,
				date,
				salutation,
				footer,
				categoryFreeText
			};

			const result = await axios.post(url, requestBody);
			return result;

		}
	};

	// * Setting labels for the checkboxes
	$(document).ready(function () {

		    const selectAllSwitch = document.getElementById("edit_therapy_scheme_selectAll");
    		const selectAllSwitchLabel = selectAllSwitch?.parentElement?.querySelector("label");
    		selectAllSwitchLabel.innerText = "{{ 'app-therapy-report-select-all'|trans }}";

	});

	function deleteInit() {

		$('.trash-icon').each(function() {
			$(this).on('click', async function(event) {
				event.preventDefault(); // Prevent the default form submission behavior
				// Get the ID of the closest <tr> element
				const rowId = $(this).closest("tr").attr("id");

				// Parse the category ID and stub ID from the row ID
				const parts = rowId.split("|");
				const categoryId = parts[1];
				const stubId = parts[3];

				const currentComments = getCurrentComments();
				const checkedCheckboxes = getCheckedCheckboxes();
				const stubsOrder = getStubsOrder();
				const suppress = false;
				const excerpt = false;

				stubsOrder.forEach((category, index) => {
					const [cId, stubIds] = category[0];

					if (cId == categoryId.toString()) {

						const stubIndex = stubIds.indexOf(stubId); 

						if (index !== -1) {
							stubIds.splice(stubIndex, 1); // Remove the stubId from the array
						}

						if (stubIds.length == 0) {

							stubsOrder.splice(index, 1); // Remove the stubId from the array

						}
					}
				});

				await generateDynamicForm(selectedLabels, currentComments, checkedCheckboxes, stubsOrder, suppress, excerpt);
				initializeSortableForTables()

			});
		});

	}

	function sortInit() {

		$('.sortAZ').each(function() {
			$(this).on('click', function(event) {
				event.preventDefault(); // Prevent the default form submission behavior
				var tbodyId = $(this).data('tbody');
				sortTable(tbodyId, 'asc');
			});
		});

		$('.sortZA').each(function() {
			$(this).on('click', function(event) {
				event.preventDefault(); // Prevent the default form submission behavior
				var tbodyId = $(this).data('tbody');
				sortTable(tbodyId, 'desc');
			});
		});
	}

	function sortTable(tbodyId, order) {
		var $tbody = $('#' + tbodyId);
		var rows = $tbody.find('tr').toArray();

		// Exclude the first two rows from sorting
		var rowsToSort = rows.slice(2);

		rowsToSort.sort(function(a, b) {
			var nameA = $(a).find('.col-2').text().toUpperCase();
			var nameB = $(b).find('.col-2').text().toUpperCase();
			
			if (order === 'asc') {
				return nameA.localeCompare(nameB);
			} else {
				return nameB.localeCompare(nameA);
			}
		});

		// Remove subsequent rows after the second one
		rows.slice(2).forEach(function(row) {
			row.remove();
		});

		// Append the sorted rows after the second row
		rowsToSort.forEach(function(row) {
			$tbody.append(row);
		});
	}

	// * Resetting when page is refreshed
	$(document).ready(function () {
		// * Resetting the select2
		const currentSelectedLabelsIDs = JSON.parse(
			`[{% for id in selectedLabels %}{% if loop.last %}{{ id }}{% else %}{{ id }},{% endif %}{% endfor %}]`
		);
		$("#edit_therapy_scheme_labels")
			.val(currentSelectedLabelsIDs)
			.trigger("change");

	});


	{# * Use select all Switch #}
	$(document).ready(function () {
		const selectAllSwitch = document.getElementById("edit_therapy_scheme_selectAll");
		selectAllSwitch?.addEventListener("change", function (event) {
			const checkboxes = document.querySelectorAll("input[name^='targets|labelID=']");
			checkboxes.forEach((checkbox) => {

				if (event.target.checked) {
					checkbox.checked = 'checked';
				} else {
					checkbox.checked = '';
				}
			});
		});
	});

	// * Use excerpt Switch
	$(document).ready(function () {
		const excerptSwitch = document.getElementById("edit_therapy_scheme_excerpt");
		excerptSwitch?.addEventListener("change", function (event) {
				const descriptionItems = document.querySelectorAll(".descriptionItem");
				const excerptItems = document.querySelectorAll(".excerptItem");
				if (event.target.checked) {
						descriptionItems.forEach((item) => item.classList.add("d-none"));
						excerptItems.forEach((item) => item.classList.remove("d-none"));
				} else {
						descriptionItems.forEach((item) => item.classList.remove("d-none"));
						excerptItems.forEach((item) => item.classList.add("d-none"));
				}
		});
	});

	// * Suppress labels Switch
	$(document).ready(function () {
		const suppressLabelsSwitch = document.getElementById("edit_therapy_scheme_suppress");
		suppressLabelsSwitch?.addEventListener("change", function (event) {
				const rows = document.querySelectorAll("tr.hideLabels");
				if (event.target.checked) {
						rows.forEach((row) => row.classList.add("d-none"));
				} else {
						rows.forEach((row) => row.classList.remove("d-none"));
				}
		});
	});

	// * Reset Stubs Order to label's default
	$(document).ready(function () {
		
		const labelsSelect2 = $("#edit_therapy_scheme_labels").select2("data");
		const selectedlabels = labelsSelect2.map((item) => item.id);

		const resetStubsOrderButton = document.getElementById("resetStubsOrderButton");
		resetStubsOrderButton?.addEventListener("click", async function (event) {
			const currentComments = getCurrentComments();
			const checkedCheckboxes = getCheckedCheckboxes();
			const stubsOrder = getStubsWithoutLabels();
			const suppress = false;
			const excerpt = false;
			await generateDynamicForm(selectedLabels, currentComments, checkedCheckboxes, stubsOrder, suppress, excerpt);
			
			initializeSortableForTables()
		
		});
	});

$(document).ready(function () {
	$("#searchStubsInput").keypress(function(event) {
        if (event.which == 13) { // 13 is the Enter key code
            event.preventDefault();
            $("#searchButton").click();
        }
    });

 $("#searchButton").click(async function () {
    const searchText = $("#searchStubsInput").val();
    if (searchText.trim() === "") {
        $("#searchResults").empty();
        return;
    }

    const url = "{{ path('app_therapy_stubs_scheme_search') }}";
    try {
        const response = await axios.post(url, { searchText });

        $("#searchResults").empty();
        const rows = response.data.map((stub) => {
            const stubId = stub.id;
            const stubName = $('<div>').text(stub.name).html(); // Escaping HTML
            const excerpt = $('<div>').text(stub.excerpt.substring(0, 50)).html(); // Escaping HTML
            const categoryId = stub.categoryId;
            const labels = stub.labels.map((label) => {
                return label.name;
            }).join(" ,");
            if (labels) {
                return `<tr data-stub-id="${stubId}" data-category-id="${categoryId}"><td>${stubName}</td><td>${excerpt}</td><td>${$('<div>').text(labels).html()}</td></tr>`;
            } else {
                return `<tr data-stub-id="${stubId}" data-label-id="" data-category-id="${categoryId}"><td>${stubName}</td><td>${excerpt}</td><td class="no-label">Not Assigned to a LABEL</td></tr>`;
            }
        });

        if(rows.length) {
            $("#searchResults").html(`
                <table id="searchResultsTable" class="display">
                    <thead>
                        <tr>
                            <th>Stub Name</th>
                            <th>Excerpt</th>
                            <th>Label</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${rows.join('')}
                    </tbody>
                </table>
            `);
            
            setupPagination('searchResultsTable', 100); // Initialize custom pagination
        }
    } catch (error) {
        console.error("Error fetching search results:", error);
        // Handle the error (e.g., display an error message to the user)
    }
});

function setupPagination(tableId, rowsPerPage) {
    const table = document.getElementById(tableId);
    const tbody = table.getElementsByTagName('tbody')[0];
    const rows = Array.from(tbody.getElementsByTagName('tr'));
    const pageCount = Math.ceil(rows.length / rowsPerPage);

    let currentPage = 1;

    function displayPage(page) {
        rows.forEach((row, index) => {
            row.style.display = (index >= (page - 1) * rowsPerPage && index < page * rowsPerPage) ? '' : 'none';
        });
    }

    displayPage(currentPage);

    // Add pagination controls
    const paginationControls = document.createElement('div');
    paginationControls.className = 'pagination-controls';

    const prevButton = document.createElement('button');
    prevButton.textContent = 'Previous';
    prevButton.className = 'page-link';
    prevButton.addEventListener('click', (event) => {
        event.preventDefault(); // Prevent form submission
        if (currentPage > 1) {
            currentPage--;
            displayPage(currentPage);
        }
    });

    const nextButton = document.createElement('button');
    nextButton.textContent = 'Next';
    nextButton.className = 'page-link';
    nextButton.addEventListener('click', (event) => {
        event.preventDefault(); // Prevent form submission
        if (currentPage < pageCount) {
            currentPage++;
            displayPage(currentPage);
        }
    });

    paginationControls.appendChild(prevButton);
    paginationControls.appendChild(nextButton);

    table.parentElement.appendChild(paginationControls);
}
    $("#searchResults").on("click", "tr", async function() {
		
        // Get the unique identifier of the clicked row (e.g., stub ID)
        const stubId = $(this).data("stub-id");
        const categoryId = $(this).data("category-id");

        // Update selected labels array
        const labelsSelect2 = $("#edit_therapy_scheme_labels").select2("data");
        const selectedLabels = labelsSelect2.map((item) => item.id);

        const currentComments = getCurrentComments();
        const checkedCheckboxes = getCheckedCheckboxes();
        const stubsOrder = getStubsOrder();
        const suppress = false;
        const excerpt = false;

		var categoryFound = false;
		stubsOrder.forEach((category) => {
			const [cId, stubIds] = category[0];
			if (cId[0] == categoryId.toString() ) {
				stubIds.push( stubId.toString() );
				categoryFound = true;
			}
		});

		if (!categoryFound) {
			stubsOrder.push([[categoryId.toString(), [stubId.toString()]]]);
		}

		$("#contentDisplayedWhenNoLabelsAreSelected").addClass("d-none");
		$("#contentDisplayedWhenLabelsAreSelected").removeClass("d-none");

		await generateDynamicForm(selectedLabels, currentComments, checkedCheckboxes, stubsOrder, suppress, excerpt);
		initializeSortableForTables()
		const checkbox = document.querySelector(`[name='targets|labelID=${categoryId}|stubID=${stubId}']`);
		checkbox.checked = 'checked';

    });
});

	// * Generate PDF, Save as template, Save as HTML
	$(document).ready(function () {

		// * Function that will be used when saving as template or updating the current template
		function handleSubmit(updateCurrent) {
			// Set the updateCurrent checkbox based on the input parameter
			$("#edit_therapy_scheme_updateCurrent").prop("checked", updateCurrent);

			// Get the comments and not-checked checkboxes
			const comments = getCurrentComments();
			const checkedCheckboxes = getCheckedCheckboxes();
			const stubsOrder = getStubsOrder();
			const categoryFreeText = getCategoryFreeText();

			// Set the values of the hidden input fields
			$("#edit_therapy_scheme_comments").val(JSON.stringify(comments));
			$("#edit_therapy_scheme_targets").val(JSON.stringify(checkedCheckboxes));
			$("#edit_therapy_scheme_stubsOrder").val(JSON.stringify(stubsOrder));
			$("#edit_therapy_scheme_freeText").val(JSON.stringify(categoryFreeText));

			// Submit the form
			$("#edit_create_therapy_scheme_form").submit();
		}

		$("#saveAsTemplateButton").click(() => handleSubmit(false));
		$("#updateTemplateButton").click(() => handleSubmit(true));

		$("#generatePatientPDFButton").click(async function () {
			const currentComments = getCurrentComments();
			const checkedCheckboxes = getCheckedCheckboxes();
			const stubsOrder = getStubsOrder();
			const suppress = false;
			const excerpt = false;
			const response = await generateReport(selectedLabels, currentComments, checkedCheckboxes, stubsOrder, suppress, excerpt);
			const responseStatus = response.status;
			if (responseStatus === 200) {
				const form = document.getElementById("generatePDFForm");
				form.submit();
			}
		});

		$("#generatePatientHTMLButton").click(async function (e) {
			e.preventDefault();
			const currentComments = getCurrentComments();
			const checkedCheckboxes = getCheckedCheckboxes();
			const stubsOrder = getStubsOrder();
			const suppress = false;
			const excerpt = false;
			const response = await generateReport(selectedLabels, currentComments, checkedCheckboxes, stubsOrder, suppress, excerpt);
			const responseStatus = response.status;
			if (responseStatus === 200) {
				const generateHTMLLink = document.getElementById("generateHTMLLink");
				generateHTMLLink.click();
			}
		});

		$("#generateShortHTMLButton").click(async function (e) {
			e.preventDefault();
			const currentComments = getCurrentComments();
			const checkedCheckboxes = getCheckedCheckboxes();
			const stubsOrder = getStubsOrder();
			const suppress = false;
			const excerpt = true;
			const response = await generateReport(selectedLabels, currentComments, checkedCheckboxes, stubsOrder, suppress, excerpt);
			const responseStatus = response.status;
			if (responseStatus === 200) {
				const generateHTMLLink = document.getElementById("generateHTMLLink");
				generateHTMLLink.click();
			}
		});

		$("#generateCombinedHTMLButton").click(async function (e) {
			e.preventDefault();
			const currentComments = getCurrentComments();
			const checkedCheckboxes = getCheckedCheckboxes();
			const stubsOrder = getStubsOrder();
			const suppress = false;
			const excerpt = true;
			const combined = true;
			const response = await generateReport(selectedLabels, currentComments, checkedCheckboxes, stubsOrder, suppress, excerpt, combined);
			const responseStatus = response.status;
			if (responseStatus === 200) {
				const generateHTMLLink = document.getElementById("generateHTMLLink");
				generateHTMLLink.click();
			}
		});

	});

</script>
{% endblock %}


{% block stylesheets %}
	<style>
		.d-none {
			display: none;
		}
		#oldTbody .handle {
			cursor: grab;
		}
	</style>

    <style>
        #searchResultsTable {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        #searchResultsTable th, #searchResultsTable td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        #searchResultsTable th {
            background-color: #f2f2f2;
        }
		.pagination-controls {
			display: flex;
			justify-content: center;
			margin-top: 10px;
		}

		.page-link {
			padding: 5px 10px;
			margin: 0 5px;
			border: 1px solid #ddd;
			background-color: #f8f9fa;
			cursor: pointer;
		}

        .no-label {
            font-style: italic;
            color: #999;
        }
		.trash-icon {
            color: #555; /* Grey color */
            background-color: transparent; /* Transparent background */
            border: none; /* No border */
            padding: 0; /* Remove padding */
            transition: color 0.3s; /* Smooth color transition */
        }
        .trash-icon:hover {
            color: red; /* Grey color */
            background-color: transparent; /* Transparent background */
            border: none; /* No border */
            padding: 0; /* Remove padding */
            transition: color 0.3s; /* Smooth color transition */
        }
		.editor-container {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #e0e0e0;
        }
        .editor-label {
            font-weight: bold;
            margin-bottom: 10px;
            display: block;
        }
        .editor-wrapper {
            margin-bottom: 20px;
        }
    </style>

{% endblock %}
