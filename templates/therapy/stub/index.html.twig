{% extends 'base.html.twig' %}


{% block body %}
    <div class="container">
        <h2>{{ formTitle }}</h2>
        {{ form_start(stubForm, {
            attr: {'data-controller': 'main', 'id': 'stubForm'}
        }) }}
        <div class="row-cols-2">
            <div class="col">
                <div class="mb-3">
                    {{ form_label(stubForm.name) }}
                    {{ form_widget(stubForm.name)}}
                </div>
                <div class="form-group quill-wrapper">
                    <label for="description-editor">{{ form_label(stubForm.description) }}</label>
                    <div class="quill-editor" id="description-editor" data-quill-target="description"></div>
                    {{ form_widget(stubForm.description, { 'attr': { 'class': 'd-none' } }) }}
                </div>

                <div class="form-group quill-wrapper mt-4">
                    <label for="excerpt-editor">{{ form_label(stubForm.excerpt) }}</label>
                    <div class="quill-editor" id="excerpt-editor" data-quill-target="excerpt"></div>
                    {{ form_widget(stubForm.excerpt, { 'attr': { 'class': 'd-none' } }) }}
                </div>

                <div class="form-group quill-wrapper mt-4">
                    <label for="background-editor">{{ form_label(stubForm.background) }}</label>
                    <div class="quill-editor" id="background-editor" data-quill-target="background"></div>
                    {{ form_widget(stubForm.background, { 'attr': { 'class': 'd-none' } }) }}
                </div>
                <div class="mb-3">
                    {{ form_label(stubForm.category) }}
                    {{ form_widget(stubForm.category)}}
                </div>
                <div class="mb-3">
                    {{ form_row(stubForm.labels)}}
                </div>
            </div>
        </div>
        <div class="row">
            <div class="d-grid gap-2 d-md-block mb-4">
                {{ form_row(stubForm.submitAndNew)}}
                <a href="{{ path('app_main') }}" class="btn-secondary btn">{{ 'app-cancel-button'|trans }}</a>
                {% if stub and status == "edit" %}
                    <button class="btn-dark btn" id="deleteUndoBTN" type="button" data-bs-toggle="modal" data-bs-target="{% if stub.isDeleted %}null{% else %}#confirmModal{% endif %}">
                        {% if stub.isDeleted %}{{ 'app-undelete-button'|trans }}{% else %}{{ 'app-delete-button'|trans }}{% endif %}
                    </button>
                {% endif %}
                <button class="btn-primary btn" id="submitBTN" type="submit">{{ 'app-save-button'|trans }}</button>
                <button class="btn-primary btn" id="submitAndNewBTN" type="submit">{{ 'app-save-and-new-button'|trans }}</button>
                {% if stub and status == "edit" %}
                <a href="{{ path('app_therapy_stub_duplicate', {id: stub.id}) }}" id="duplicateBTN" class="btn-primary btn">{{'app-duplicate-button'|trans}}</a>
                <button class="btn-primary btn" id="submitAndDuplicateBTN" type="submit">{{ 'app-save-and-duplicate-button'|trans }}</button>
                {% endif %}
            </div>
        </div>
        {{ form_end(stubForm) }}

        {% if stub and status == "edit" %}
            <form action="{{ path('app_therapy_stub_delete_undelete', {'id': stub.id}) }}" method="post" id="deleteUndoForm">
            </form>
            <form action="{{ path('app_therapy_stub_mark_unmark', {'id': stub.id}) }}" method="post" id="markUndoForm">
            </form>
        {% endif %}

</div>
    {% if stub and status == "edit" %}
        <div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title" id="confirmModalLabel">{{ 'app-modal-stub-confirmation'|trans }}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="{{ 'app-modal-close'|trans }}"></button>
                    </div>
                    <div class="modal-body">
                        <div id="relatedSchemes"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" id="confirmDelete" class="btn btn-danger">{{ 'app-delete-button'|trans }}</button>
                        <button id="markAsDeleted" class="btn btn-danger" type="button" data-bs-toggle="modal" >
                            {% if stub.isMarked %}{{ 'app-unmark-as-deleted-button'|trans }}{% else %}{{ 'app-mark-as-deleted-button'|trans }}{% endif %}
                        </button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{ 'app-cancel-button'|trans }}</button>
                    </div>
                </div>
            </div>
        </div>
    {% endif %}

{% endblock %}

{% block javascripts %}

    {{ parent() }}
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.18/summernote-bs4.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.snow.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {

        const quillOptions = {
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline', 'strike'],   // Bold, Italic, Underline, Strikethrough
                    [{ 'script': 'sub' }, { 'script': 'super' }], // Subscript, Superscript
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }], // Numbered List, Bulleted List
                    [{ 'indent': '-1' }, { 'indent': '+1' }], // Indent
                    ['clean'], // Clear formatting
                ]
            },
            theme: 'snow'
        };

        const quillDescription = new Quill('#description-editor', quillOptions);

        const quillExcerpt = new Quill('#excerpt-editor', quillOptions);

        const quillBackground = new Quill('#background-editor', quillOptions);

        quillDescription.root.innerHTML = document.querySelector('textarea[name="stub[description]"]').value;
        quillExcerpt.root.innerHTML = document.querySelector('textarea[name="stub[excerpt]"]').value;
        quillBackground.root.innerHTML = document.querySelector('textarea[name="stub[background]"]').value;

        quillDescription.root.style.fontSize = '16px';	
        quillExcerpt.root.style.fontSize = '16px';	
        quillBackground.root.style.fontSize = '16px';	

        const submitAndNew = document.getElementById('submitAndNewBTN');
        submitAndNew.addEventListener('click', function () {
            const checkbox = document.getElementById('stub_submitAndNew');
            checkbox.checked = true;
            document.querySelector('textarea[name="stub[description]"]').value = quillDescription.root.innerHTML;
            document.querySelector('textarea[name="stub[excerpt]"]').value = quillExcerpt.root.innerHTML;
            document.querySelector('textarea[name="stub[background]"]').value = quillBackground.root.innerHTML;
            const form = document.getElementById('stubForm');
            form.submit();
        });

        const submit = document.getElementById('submitBTN');
        submit.addEventListener('click', function () {
            const checkbox = document.getElementById('stub_submitAndNew');
            checkbox.checked = false;
            document.querySelector('textarea[name="stub[description]"]').value = quillDescription.root.innerHTML;
            document.querySelector('textarea[name="stub[excerpt]"]').value = quillExcerpt.root.innerHTML;
            document.querySelector('textarea[name="stub[background]"]').value = quillBackground.root.innerHTML;
            const form = document.getElementById('stubForm');
            form.submit();
        });

        const submitAndDuplicate = document.getElementById('submitAndDuplicateBTN');
        submitAndDuplicate.addEventListener('click', function () {
            const checkbox = document.getElementById('stub_submitAndDuplicate');
            checkbox.checked = true;
            console.log(checkbox);
            document.querySelector('textarea[name="stub[description]"]').value = quillDescription.root.innerHTML;
            document.querySelector('textarea[name="stub[excerpt]"]').value = quillExcerpt.root.innerHTML;
            document.querySelector('textarea[name="stub[background]"]').value = quillBackground.root.innerHTML;
            const form = document.getElementById('stubForm');
            form.submit();
        });

        {% if stub and status == "edit" %}
            const deleteButton = document.getElementById('deleteUndoBTN');
            const confirmDeleteButton = document.getElementById('confirmDelete');
            const markAsDeletedButton = document.getElementById('markAsDeleted');

            const isDeleted = {% if stub.isDeleted %}true{% else %}false{% endif %};
            const isMarked = {% if stub.isMarked %}true{% else %}false{% endif %};

            const notUsedInScheme = {% if usedSchemes == [] %}true{% else %}false{% endif %};

            const deleteModel = document.getElementById('confirmModal');

                if(notUsedInScheme) {
                    const relatedSchemesDiv = document.getElementById('relatedSchemes');
                    relatedSchemesDiv.innerHTML = "<h5>This Stub is not used in any schemes</h5>";
                }
                else {
                    confirmDeleteButton.setAttribute('disabled', 'disabled');
                    const relatedSchemesDiv = document.getElementById('relatedSchemes');
                    relatedSchemesDiv.innerHTML = "<h5>This Stub is used in the following schemes</h5>";
                    relatedSchemesDiv.innerHTML += '<ul>';
                    {% for key, scheme in usedSchemes %}
                        relatedSchemesDiv.innerHTML += '<li><a href="' + '{{ path('app_therapy_scheme_edit', {'id': scheme.id}) }}' + '">' + '{{scheme.name}}'  + '</a></li>';
                    {% endfor %}                    
                    relatedSchemesDiv.innerHTML += '</ul>';
                }



            if (deleteButton && confirmDeleteButton) {
                deleteButton.addEventListener('click', function (event) {
                    event.preventDefault();
                    if (isDeleted) {               
                        document.getElementById('deleteUndoForm').submit();
                    } else {
                        // const deleteModal = new bootstrap.Modal(document.getElementById('confirmModal'));
                        deleteModal.show();
                    }
                });
                
                confirmDeleteButton.addEventListener('click', function () {
                    document.getElementById('deleteUndoForm').submit();
                });
                markAsDeletedButton.addEventListener('click', function () {
                    document.getElementById('markUndoForm').submit();
                });
            }
        {% endif %}

    });
</script>
{% endblock %}
